package project.master.dao.impl;

import java.sql.SQLException;
import java.util.HashMap;
import java.util.Map;

import org.springframework.orm.ibatis.SqlMapClientCallback;

import com.ibatis.sqlmap.client.SqlMapExecutor;

import project.common.Common;
import project.master.dao.IEduMasterWriteDAO;
import framelib.dao.BaseDAOImpl;
import framelib.utils.page.PageObject;

public class EduMasterWriteDaoImpl extends BaseDAOImpl implements IEduMasterWriteDAO{

	@Override
	public boolean addComparison(Map<String, Object> condition) {
		Integer id = (Integer)this.getSqlMapClientTemplate().insert("add_comparison",condition);
		if(id <= 0){
			return false;
		}
		return true;
	}

	@Override
	public boolean updateComparison(Map<String, Object> condition) {
		Integer id = (Integer)this.getSqlMapClientTemplate().update("update_comparison", condition);
		if(id <= 0){
			return false;
		}
		return true;
	}

	@Override
	public boolean deleteComparison(Map<String, Object> condition) {
		Integer id = (Integer)this.getSqlMapClientTemplate().delete("delete_comparison", condition);
		if(id <= 0){
			return false;
		}
		return true;
	}

	@Override
	public boolean signUpComparisonTeacher(Map<String, Object> condition) {
		Integer id = (Integer)this.getSqlMapClientTemplate().insert("signup_comparison_teacher", condition);
		if(id <= 0){
			return false;
		}
		return true;
	}

	@Override
	public boolean canelSignUpComparisonTeacher(Map<String, Object> condition) {
		Integer id = (Integer)this.getSqlMapClientTemplate().update("canel_signup_comparison_teacher", condition);
		if(id <= 0){
			return false;
		}
		return true;
	}

	@Override
	public boolean resignUpComparisonTeacher(Map<String, Object> condition) {
		Integer id = (Integer)this.getSqlMapClientTemplate().update("resignup_comparison_teacher", condition);
		if(id <= 0){
			return false;
		}
		return true;
	}

	@Override
	public boolean signUpComparisonTeacherBatch(Map<String, Object> condition) {
		String teacherIds = (String) condition.get("teacherIds");
		final String ids[] = teacherIds.split(",");
		final String comparisonId = (String) condition.get("comparisonId");
		final String createBy = String.valueOf((Integer) condition.get("createBy"));
		Object obj = this.getSqlMapClientTemplate().execute(new SqlMapClientCallback<Object>() {
			@Override
			public Object doInSqlMapClient(SqlMapExecutor arg0) throws SQLException {
				arg0.startBatch();
				for(String id : ids){
					final Map<String,Object> param = new HashMap<String,Object>();
					param.put("comparisonId", comparisonId);
					param.put("createBy", createBy);
					param.put("teacherId", id);
					arg0.insert("signup_comparison_teacher", param);
				}
				return arg0.executeBatch();
			}
			
		});
		if(obj != null && (Integer)obj>0){
			return true;
		}
		return false;
	}

	@Override
	public boolean canelSignUpComparisonTeacherBatch(
			Map<String, Object> condition) {
		String teacherIds = (String) condition.get("teacherIds");
		final String ids[] = teacherIds.split(",");
		final String comparisonId = (String) condition.get("comparisonId");
		final String updateBy = String.valueOf((Integer) condition.get("updateBy"));
		Object obj = this.getSqlMapClientTemplate().execute(new SqlMapClientCallback<Object>() {
			@Override
			public Object doInSqlMapClient(SqlMapExecutor arg0) throws SQLException {
				arg0.startBatch();
				for(String id : ids){
					final Map<String,Object> param = new HashMap<String,Object>();
					param.put("comparisonId", comparisonId);
					param.put("updateBy", updateBy);
					param.put("teacherId", id);
					arg0.delete("canel_signup_comparison_teacher", param);
				}
				return arg0.executeBatch();
			}
			
		});
		if(obj != null && (Integer)obj>0){
			return true;
		}
		return false;
	}


}
