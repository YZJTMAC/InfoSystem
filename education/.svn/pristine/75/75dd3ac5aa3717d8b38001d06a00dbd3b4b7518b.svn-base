package project.master.service.impl;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.UUID;

import org.apache.log4j.Logger;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

import project.master.dao.IEduMasterReadDAO;
import project.master.dao.IEduMasterWriteDAO;
import project.master.pojo.EduComparisonComment;
import project.master.pojo.EduComparisonMaster;
import project.master.service.IEduMasterService;
import project.person.pojo.EduUser;
import project.system.pojo.EduSchool;
import project.system.pojo.SysArea;
import project.system.pojo.SysDictionary;
import project.system.service.impl.SysSchoolServiceImpl;
import project.util.DataUtil;
import framelib.service.AbsService;
import framelib.utils.page.PageObject;

public class EduMasterServiceImpl extends AbsService implements IEduMasterService {
	private static final Logger log = Logger
			.getLogger(EduMasterServiceImpl.class);
	public static String[] chars = new String[] { "a", "b", "c", "d", "e", "f",  
        "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s",  
        "t", "u", "v", "w", "x", "y", "z", "0", "1", "2", "3", "4", "5",  
        "6", "7", "8", "9", "A", "B", "C", "D", "E", "F", "G", "H", "I",  
        "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V",  
        "W", "X", "Y", "Z" };  
	
	@Autowired
	@Qualifier("eduMasterReadDAO")
	private IEduMasterReadDAO eduMasterReadDAO;
	
	@Autowired
	@Qualifier("eduMasterWriteDAO")
	private IEduMasterWriteDAO eduMasterWriteDAO;
	

	@Override
	public Integer addComparison(Map<String, Object> condition) {
		return eduMasterWriteDAO.addComparison(condition);
	}

	@Override
	public PageObject queryComparison(Map<String, Object> condition) {
		return eduMasterReadDAO.queryComparison(condition);
	}

	@Override
	public int updateComparison(Map<String, Object> condition) {
		return eduMasterWriteDAO.updateComparison(condition);
	}

	@Override
	public boolean deleteComparison(Map<String, Object> condition) {
		return eduMasterWriteDAO.deleteComparison(condition);
	}

	@Override
	public PageObject queryComparisonTeacher(Map<String, Object> condition) {
		return eduMasterReadDAO.queryComparisonTeacher(condition);
	}

	@Override
	public int signUpComparisonTeacher(Map<String, Object> condition) {
		return eduMasterWriteDAO.signUpComparisonTeacher(condition);
	}

	@Override
	public boolean canelSignUpComparisonTeacher(Map<String, Object> condition) {
		return eduMasterWriteDAO.canelSignUpComparisonTeacher(condition);
	}

	@Override
	public boolean updateComparisonCommentStatus(Map<String, Object> condition) {
		return eduMasterWriteDAO.updateComparisonCommentStatus(condition);
	}

	@Override
	public List<EduComparisonComment> querySignUpComparisonTeacher(
			Map<String, Object> condition) {
		return eduMasterReadDAO.querySignUpComparisonTeacher(condition);
	}

	@Override
	public boolean signUpComparisonTeacherBatch(Map<String, Object> condition) {
		return eduMasterWriteDAO.signUpComparisonTeacherBatch(condition);
	}

	@Override
	public boolean canelSignUpComparisonTeacherBatch(
			Map<String, Object> condition) {
		return eduMasterWriteDAO.canelSignUpComparisonTeacherBatch(condition);
	}

	@Override
	public int querySignUpComparisonTeacherCount(Map<String, Object> condition) {
		// TODO Auto-generated method stub
		return eduMasterReadDAO.querySignUpComparisonTeacherCount(condition);
	}

	@Override
	public boolean createMaster(Map<String, Object> condition) {
		Integer masterNum = Integer.parseInt((String) condition.get("masterNum"));
		Object comparisonId = condition.get("comparisonId");
		for(int i = 0 ; i < masterNum ; i++){
			condition.put("loginAccount", generateShortUuid());
			condition.put("password", generateShortUuid());
			condition.put("status", 8);
			condition.put("realName", "专家");
			int masterId = eduMasterWriteDAO.createMaster(condition);
			condition.put("masterId", masterId);
			if(comparisonId != null){//根据活动创建专家号时
				if(!eduMasterWriteDAO.associatedMasterComparison(condition) ){
					return false;
				}
			}
		}
		return true;
	}
	
	public static String generateShortUuid() {  
	    StringBuffer shortBuffer = new StringBuffer();  
	    String uuid = UUID.randomUUID().toString().replace("-", "");  
	    for (int i = 0; i < 8; i++) {  
	        String str = uuid.substring(i * 4, i * 4 + 4);  
	        int x = Integer.parseInt(str, 16);  
	        shortBuffer.append(chars[x % 0x3E]);  
	    }  
	    return shortBuffer.toString();  
	}

	@Override
	public PageObject queryComparisonMaster(Map<String, Object> condition) {
		return eduMasterReadDAO.queryComparisonMaster(condition);
	}

	@Override
	public boolean updateComparisonMasterDisable(Map<String, Object> condition) {
		return eduMasterWriteDAO.updateComparisonMasterDisable(condition);
	}

	@Override
	public boolean saveComparisonToMaster(Map<String, Object> condition) {
		if(condition.get("comparisonId") != null){//为活动设直专家
			String masterIds[] = ((String)condition.get("masterIds")).split(",");
			for(String masterId : masterIds){
				condition.put("masterId", masterId);
				if(!eduMasterWriteDAO.associatedMasterComparison(condition)){
					return false;
				}
			}
		}else if(condition.get("masterId") != null){//位专家设置活动
			String comparisonIds[] = ((String)condition.get("comparisonIds")).split(",");
			for(String comparisonId : comparisonIds){
				condition.put("comparisonId", comparisonId);
				if(!eduMasterWriteDAO.associatedMasterComparison(condition)){
					return false;
				}
			}
		}
		
		return true;
	}

	@Override
	public PageObject queryComparisonCheck(Map<String, Object> condition) {
		return eduMasterReadDAO.queryComparisonCheck(condition);
	}

	@Override
	public boolean deleteComparisonToMaster(Map<String, Object> condition) {
		return eduMasterWriteDAO.deleteComparisonToMaster(condition);
	}

	@Override
	public boolean createMasterOne(Map<String, Object> condition) {
		Integer i = eduMasterWriteDAO.createMaster(condition);
		if(i < 0){
			return false;
		}
		return true;
	}

	@Override
	public boolean setMasterStatus(Map<String, Object> condition) {
		return eduMasterWriteDAO.setMasterStatus(condition);
	}

	@Override
	public boolean delComprisonFile(Map<String, Object> condition) {
		return eduMasterWriteDAO.delComprisonFile(condition);
	}

	@Override
	public boolean setComparisonStatus(Map<String, Object> condition) {
		return eduMasterWriteDAO.setComparisonStatus(condition);
	}

	@Override
	public List<SysArea> getArea(Map<String, Object> condition) {
		return eduMasterReadDAO.getArea(condition);
	}

	@Override
	public List<EduSchool> getSchool(Map<String, Object> condition) {
		return eduMasterReadDAO.getSchool(condition);
	}

	@Override
	public int updateSignUpComparisonTeacher(Map<String, Object> condition) {
		return eduMasterWriteDAO.updateSignUpComparisonTeacher(condition);
	}

	@Override
	public List<EduComparisonComment> queryMemo(Map<String, Object> condition) {
		return eduMasterReadDAO.queryMemo(condition);
	}

	@Override
	public PageObject queryComparisonByMaster(Map<String, Object> condition) {
		return eduMasterReadDAO.queryComparisonByMaster(condition);
	}

	@Override
	public boolean judgeScore(Map<String, Object> condition) {
		return eduMasterWriteDAO.judgeScore(condition);
	}

	@Override
	public PageObject queryComparisonTeacherScore(Map<String, Object> condition) {
		return eduMasterReadDAO.queryComparisonTeacherScore(condition);
	}

	@Override
	public PageObject queryTeacherComment(Map<String, Object> condition) {
		return eduMasterReadDAO.querTeacherComment(condition);
	}

	@Override
	public List<EduComparisonComment> queryMasterScore(
			Map<String, Object> condition) {
		return eduMasterReadDAO.queryMasterScore(condition);
	}

	@Override
	public List<EduUser> queryMaster(Map<String, Object> condition) {
		return eduMasterReadDAO.queryMaster(condition);
	}

	@Override
	public boolean updateMasterOne(Map<String, Object> condition) {
		return eduMasterWriteDAO.updateMasterOne(condition);
	}

	@Override
	public Map<String, Object> searchMasterExcel(InputStream is, String fileType) throws IOException {
		Map<String, Object> result = new HashMap<String, Object>();
		// 正确的数据
		List<EduUser> ids = new ArrayList<EduUser>();
		List<Row> dbRows = new ArrayList<Row>();
		// 数据不合格的row
		List<Row> rows = new ArrayList<Row>();
		// loginAccount合集
		List<String> loginAccountList = new ArrayList<String>();

		Workbook wb = null;
		if (fileType.equalsIgnoreCase("xls")) {
			wb = new HSSFWorkbook(is);
		} else {
			wb = new HSSFWorkbook(is);
		}
		Sheet sheet = wb.getSheetAt(0);
		int max = sheet.getLastRowNum();

       //标题行
		Row titleRow = sheet.getRow(0);
		
		for (int i = 1; i < max + 1; i++) {
			EduUser master = new EduUser();
			Row row = sheet.getRow(i);
			if (row != null) {
				// 错误信息行
				if (row.getCell(3) == null) {
					row.createCell(3);
				}
				String masterName = DataUtil.getCellValue(row.getCell(0));	//专家名
				String loginAccount = DataUtil.getCellValue(row.getCell(1));//用户名
				String password = DataUtil.getCellValue(row.getCell(2));	//密码

				// 判断必填项是否为空
				if (masterName.length() == 0 ) {
					row.getCell(3).setCellValue("专家姓名为空");
					rows.add(row);
					log.info("导入专家：专家姓名为空.....");
					continue;
				}
				// 判断必填项是否为空
				if (loginAccount.length() == 0 ) {
					row.getCell(3).setCellValue("用户名为空");
					rows.add(row);
					log.info("导入专家：用户名为空.....");
					continue;
				}
				// 判断必填项是否为空
				if (password.length() == 0 ) {
					row.getCell(3).setCellValue("密码为空");
					rows.add(row);
					log.info("导入专家：密码为空.....");
					continue;
				}
				Map<String,Object> condition = new HashMap<String,Object>();
				condition.put("loginAccount", loginAccount);
				List<EduUser> userList = eduMasterReadDAO.queryMaster(condition);
				if(userList.size() > 0){
					row.getCell(3).setCellValue("系统中已存在该用户名");
					rows.add(row);
					log.info("导入专家：系统中已存在该用户名.....");
					continue;
				}
				if(loginAccountList.contains(loginAccount)){
					row.getCell(3).setCellValue("文档中出现用户名重复");
					rows.add(row);
					log.info("导入专家：文档中出现用户名重复.....");
					continue;
				
				}
				loginAccountList.add(loginAccount);
				master.setRealName(masterName);
				master.setLoginAccount(loginAccount);
				master.setPassword(password);
				ids.add(master);
				dbRows.add(row);
				
			}
		}
		// 存数据库的数据
		result.put("toDB", ids);
		result.put("toDBRow", dbRows);
		// 错误的数据
		result.put("toExl", rows);
		return result;
	}

	@Override
	public Map<String, Object> intoDB(String toDBpath, String account) throws IOException {
		Map<String, Object> result = new HashMap<String, Object>();
		// 导入总数
		int total = 0;
		File file = new File(toDBpath);
		if (file.isDirectory()) {
			File[] files = file.listFiles();
			for (File f : files) {
				InputStream is = new FileInputStream(f);
				Map<String, Object> map = this.searchMasterExcel(is, "xls");
				List<EduUser> ids = (List<EduUser>) map.get("toDB");
				total += ids.size();
				if (ids.size() > 0) {
					eduMasterWriteDAO.insertMasters(ids, account);
				}
			}
		}
		result.put("total", total);
		return result;
	}

	@Override
	public PageObject quertJudgeDetail(Map<String, Object> condition) {
		return eduMasterReadDAO.quertJudgeDetail(condition);
	}

	@Override
	public List<EduComparisonMaster> queryMasterAvailable(
			Map<String, Object> condition) {
		return eduMasterReadDAO.queryMasterAvailable(condition);
	}
}
